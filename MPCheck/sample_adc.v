// File: sample_adc.v
// Generated by MyHDL 0.10
// Date: Fri Nov  9 22:43:28 2018


`timescale 1ns/10ps

module sample_adc (
    ad_trig,
    clk_20M,
    nRst,
    ad_convert_done,
    outstate
);


input ad_trig;
input clk_20M;
input nRst;
input ad_convert_done;
output [3:0] outstate;
wire [3:0] outstate;

reg [3:0] next_state;
reg [3:0] current_state;
wire convert_done;




assign convert_done = ad_convert_done;


always @(current_state, convert_done, ad_trig) begin: SAMPLE_ADC_LOGIC_STATE
    casez (current_state)
        4'b???1: begin
            if (ad_trig) begin
                next_state = 4'b0010;
            end
            else begin
                next_state = 4'b0001;
            end
        end
        4'b??1?: begin
            if (convert_done) begin
                next_state = 4'b0100;
            end
            else begin
                next_state = 4'b0010;
            end
        end
        4'b?1??: begin
            if (convert_done) begin
                next_state = 4'b1000;
            end
            else begin
                next_state = 4'b0100;
            end
        end
        4'b1???: begin
            if (convert_done) begin
                next_state = 4'b0010;
            end
            else begin
                next_state = 4'b1000;
            end
        end
    endcase
end


always @(posedge clk_20M, negedge nRst) begin: SAMPLE_ADC_FUNC_STATE
    if (nRst == 0) begin
        current_state <= 4'b0001;
    end
    else begin
        current_state <= next_state;
    end
end



assign outstate = next_state;

endmodule
