// File: FramerCtrl.v
// Generated by MyHDL 0.10
// Date: Fri Jun 15 18:04:14 2018


`timescale 1ns/10ps

module FramerCtrl (
    SOF,
    state,
    syncFlag,
    clk,
    reset_n,
    B,
    G,
    G2
);
// Framing control FSM.
// 
// SOF -- start-of-frame output bit
// state -- FramerState output
// syncFlag -- sync pattern found indication input
// clk -- clock input
// reset_n -- active low reset

output SOF;
reg SOF;
output [1:0] state;
reg [1:0] state;
input syncFlag;
input clk;
input reset_n;
input [3:0] B;
output [3:0] G;
wire [3:0] G;
output [3:0] G2;
wire [3:0] G2;

reg [7:0] index;



always @(posedge clk, negedge reset_n) begin: FRAMERCTRL_FSM
    if ((reset_n == 1'b0)) begin
        SOF <= 0;
        index <= 0;
        state <= 2'b00;
    end
    else begin
        index <= ((index + 1) % 8);
        SOF <= 0;
        case (state)
            2'b00: begin
                index <= 1;
                if (syncFlag) begin
                    state <= 2'b01;
                end
            end
            2'b01: begin
                if ((index == 0)) begin
                    if (syncFlag) begin
                        state <= 2'b10;
                    end
                    else begin
                        state <= 2'b00;
                    end
                end
            end
            2'b10: begin
                if ((index == 0)) begin
                    if ((!syncFlag)) begin
                        state <= 2'b00;
                    end
                end
                SOF <= ($signed({1'b0, index}) == (8 - 1));
            end
            default: begin
                $finish;
            end
        endcase
    end
end



assign G = B ? B : (B * 2);



assign G2 = B ? B : (B * 4);

endmodule
